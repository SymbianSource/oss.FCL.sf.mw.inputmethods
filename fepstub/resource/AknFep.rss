/*
* Copyright (c) 2002 Nokia Corporation and/or its subsidiary(-ies). 
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0""
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:           
*       Resource file.
*
*/












#include <eikon.rh>
#include <avkon.rh>
#ifdef FF_DUAL_LANGUAGE_SUPPORT
#include <avkon.hrh>
#endif //FF_DUAL_LANGUAGE_SUPPORT

#include "AknFepGlobalEnums.h"

#include <avkon.rsg>
#include <avkon.loc>
#include <avkonsct.loc>

#include <avkon.mbg>
#include "AknFep.hrh"

NAME AKFP

RESOURCE RSS_SIGNATURE { }

#define qtn_aknfep_text_case_character_set ".!?¿¡"<0xFF0E><0xFF01><0xFF1F><0x3002><0x3001>

// Number mode star key mappings
#define aknfep_number_mode_keymap_standard "*+pw"
#define aknfep_number_mode_keymap_plain ""
#define aknfep_number_mode_keymap_calculator "+-*/"
#define aknfep_number_mode_keymap_converter "+-E"
#define aknfep_number_mode_keymap_to_field "+"
#define aknfep_number_mode_keymap_fixed_dialling "*+pw?"
#define aknfep_number_mode_keymap_sat "*+"
#define aknfep_number_mode_keymap_sat_hidden "*"

#define qtn_aknfep_thai_sct_av1 <0x0e34>
#define qtn_aknfep_thai_sct_av2 <0x0e31><0x0e36>
#define qtn_aknfep_thai_sct_av3 <0x0e35><0x0e37>
#define qtn_aknfep_thai_sct_bv1 <0x0e38>
#define qtn_aknfep_thai_sct_bv2 <0x0e39>
#define qtn_aknfep_thai_sct_tone <0x0e48><0x0e49><0x0e4a><0x0e4b>
#define qtn_aknfep_thai_sct_bd <0x0e3a>
#define qtn_aknfep_thai_sct_ad1 <0x0e4c><0x0e4d>
#define qtn_aknfep_thai_sct_ad2 <0x0e47>
#define qtn_aknfep_thai_sct_ad3 <0x0e4e>
#define qtn_aknfep_thai_sct_non <0x0e2f><0x0e3f><0x0e46><0x0e4f>
#define qtn_aknfep_thai_sct_non_thai_digit <0x0e50><0x0e51><0x0e52><0x0e53><0x0e54><0x0e55><0x0e56><0x0e57><0x0e58><0x0e59>
#define qtn_aknfep_thai_sct_lv <0x0e40><0x0e41><0x0e42><0x0e43><0x0e44>
#define qtn_aknfep_thai_sct_fv1 <0x0e30><0x0e32><0x0e33>
#define qtn_aknfep_thai_sct_fv2 <0x0e45>
#define qtn_aknfep_thai_sct_fv3 <0x0e24><0x0e26>
#define qtn_aknfep_thai_sct_extra_zero_character <0x0030><0x0020><0x000a>


RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_numeric_mode_chars_standard
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = aknfep_number_mode_keymap_standard;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_numeric_mode_chars_calculator
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = aknfep_number_mode_keymap_calculator;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_numeric_mode_chars_converter
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = aknfep_number_mode_keymap_converter;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_numeric_mode_chars_fixed_dialling
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = aknfep_number_mode_keymap_fixed_dialling;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_numeric_mode_chars_sat
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = aknfep_number_mode_keymap_sat;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_numeric_mode_chars_to_field
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = aknfep_number_mode_keymap_to_field;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_thai_star_common
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = qtn_aknfep_thai_sct_non qtn_aknfep_thai_sct_non_thai_digit qtn_sct_special_characters_lower  ;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_thai_0_common
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = qtn_aknfep_thai_sct_lv qtn_aknfep_thai_sct_fv1 qtn_aknfep_thai_sct_fv2 qtn_aknfep_thai_sct_fv3 qtn_aknfep_thai_sct_extra_zero_character;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_thai_star_cons
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = qtn_aknfep_thai_sct_av1 qtn_aknfep_thai_sct_av2 qtn_aknfep_thai_sct_av3 qtn_aknfep_thai_sct_bv1 qtn_aknfep_thai_sct_bv2 qtn_aknfep_thai_sct_tone qtn_aknfep_thai_sct_bd qtn_aknfep_thai_sct_ad1 qtn_aknfep_thai_sct_ad2 qtn_aknfep_thai_sct_ad3 qtn_aknfep_thai_sct_non qtn_aknfep_thai_sct_non_thai_digit qtn_sct_special_characters_lower ;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_thai_0_cons
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars =  qtn_aknfep_thai_sct_lv qtn_aknfep_thai_sct_fv1 qtn_aknfep_thai_sct_fv2 qtn_aknfep_thai_sct_fv3 qtn_aknfep_thai_sct_extra_zero_character;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_thai_star_av1_bv1
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = qtn_aknfep_thai_sct_tone qtn_aknfep_thai_sct_ad1 qtn_aknfep_thai_sct_non qtn_aknfep_thai_sct_non_thai_digit qtn_sct_special_characters_lower ;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_thai_0_av1_bv1
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = qtn_aknfep_thai_sct_lv qtn_aknfep_thai_sct_fv1 qtn_aknfep_thai_sct_fv2 qtn_aknfep_thai_sct_fv3 qtn_aknfep_thai_sct_extra_zero_character;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_thai_star_av2_bv2
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = qtn_aknfep_thai_sct_tone qtn_aknfep_thai_sct_non qtn_aknfep_thai_sct_non_thai_digit qtn_sct_special_characters_lower ;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_thai_0_av2_bv2
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = qtn_aknfep_thai_sct_lv qtn_aknfep_thai_sct_fv1 qtn_aknfep_thai_sct_fv2 qtn_aknfep_thai_sct_fv3 qtn_aknfep_thai_sct_extra_zero_character;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_thai_star_av3
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = qtn_aknfep_thai_sct_tone qtn_aknfep_thai_sct_ad2 qtn_aknfep_thai_sct_non qtn_aknfep_thai_sct_non_thai_digit qtn_sct_special_characters_lower ;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_thai_0_av3
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = qtn_aknfep_thai_sct_lv qtn_aknfep_thai_sct_fv1 qtn_aknfep_thai_sct_fv2 qtn_aknfep_thai_sct_fv3 qtn_aknfep_thai_sct_extra_zero_character;
            }
        };
    }

//these are used by general settings...

RESOURCE NUMBER_INT16 r_chinfep_chinese_input_modes_PRC
    {
    value = EPinyin | EStroke;
    }

RESOURCE NUMBER_INT16 r_chinfep_chinese_input_modes_HK
    {
    value = EStroke;
    }

RESOURCE NUMBER_INT16 r_chinfep_chinese_input_modes_Taiwan
    {
    value = EZhuyin;
    }

///


RESOURCE DIALOG r_aknfep_help_text
    {
    flags = EGeneralQueryFlags | EEikDialogFlagNoBorder | EEikDialogFlagNoShadow;
    buttons = R_AVKON_SOFTKEYS_BACK;
    items=
        {
        DLG_LINE
            {
            type = EAknCtPopupHeadingPane;
            id = EAknMessageQueryHeaderId;
            control = AVKON_HEADING
                {
                label = qtn_chi_heading_instr;
                headinglayout = R_AVKON_WML_SIGN_QUERY_HEADING_PANE;
                };
            },
        DLG_LINE
            {
            type = EAknCtMessageQuery;
            id = EAknMessageQueryContentId;
            control = AVKON_MESSAGE_QUERY
                {
                message = qtn_chi_input_help_instr;
                };
            }
        };
    }


// ---------------------------------------------------------------------------
// r_aknfep_text_kuten_invalid_error
// This string is used for Kuten input for Japanese variant
// ---------------------------------------------------------------------------
//
RESOURCE CBA r_aknfep_softkeys_empty_cancel_empty
    {
    buttons =
        {
        CBA_BUTTON {id=EAknSoftkeyEmpty;txt=text_softkey_empty;},
        CBA_BUTTON {id=EAknSoftkeyCancel; txt=text_softkey_cancel;},
        CBA_BUTTON {id=EAknSoftkeyEmpty;txt=text_softkey_empty;}
        };
    }

#ifdef RD_INTELLIGENT_TEXT_INPUT
//----------------------------------------------------------------------------
//r_aknfep_softkeys_ok_select_cancel
//
//----------------------------------------------------------------------------
//

RESOURCE CBA r_aknfep_softkeys_ok_select_cancel
	{
	buttons =
		{
		CBA_BUTTON {id=EAknSoftkeySelect;txt=text_softkey_select;},
        CBA_BUTTON {id=EAknSoftkeyCancel; txt=text_softkey_cancel;},
        CBA_BUTTON {id=EAknSoftkeySelect;txt=text_softkey_select;}
		};
	}
RESOURCE CBA r_aknfep_softkeys_ok_cancel_select
	{
	buttons =
		{
		CBA_BUTTON {id=EAknSoftkeyOk;txt=text_softkey_ok;},
        	CBA_BUTTON {id=EAknSoftkeyCancel; txt=text_softkey_cancel;},
        	CBA_BUTTON {id=EAknSoftkeySelect;txt=text_softkey_select;}
		};
	}
#endif
// ---------------------------------------------------------------------------
// r_aknfepuictrljapanesekuten_query
// This query dialog is used for Kuten input for Japanese variant
// ---------------------------------------------------------------------------
//
RESOURCE DIALOG r_aknfepuictrljapanesekuten_query
    {
    flags = EGeneralQueryFlags | EEikDialogFlagNoBorder | EEikDialogFlagNoShadow;
    buttons = r_aknfep_softkeys_empty_cancel_empty;
    items =
        {
        DLG_LINE
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            control = AVKON_DATA_QUERY
                {
                layout = EDataLayout;
                label = qtn_japin_prmpt_kuten_code;
                control = EDWIN
                    {
                    flags = EEikEdwinNoHorizScrolling;
                    width = 5;  //  AKNTAQUERY_EDWIN_WIDTH;
                    //lines = AKNTAQUERY_EDWIN_LINES;
                    maxlength = 4;  // AKNTAQUERY_EDWIN_MAXLENGTH;
                    allowed_input_modes=EAknEditorNumericInputMode;
                    default_input_mode=EAknEditorNumericInputMode;
                    special_character_table=0;
                    avkon_flags = EAknEditorFlagNoLRNavigation | EAknEditorFlagSupressShiftMenu;
                    // added to limit expanding in forms.
                    // If you want full screen use 6 here
                    max_view_height_in_lines = 5;   // AKNTAQUERY_EDWIN_LINES;
                    // if you have the line above, you must have this.
                    // It's calculable from LAF
                    base_line_delta = 21;
                    };
                };
            }
        };
    }

STRUCT HASH_KEY_LOOP
    {
    STRUCT modes[];
    }


//
// TEXT BUFFERS
//
RESOURCE LBUF r_aknfep_text_case_character_set
    {
    txt=qtn_aknfep_text_case_character_set;
    }

// User DB view option
RESOURCE LBUF r_aknfep_options_user_db_dlg
    {
    txt = qtn_chi_chinese_user_db_management;
    }

RESOURCE LBUF r_aknfep_options_input_language
    {
    txt = text_pup_option_input_language;
    }

// Chinese input mode option
RESOURCE LBUF r_aknfep_options_input_mode_chi
    {
    txt = qtn_chi_pup_option_input_method;
    }

// Chinese CangJie mode selection option
RESOURCE LBUF r_aknfep_options_cangjie_mode
    {
    txt = qtn_chi_pup_option_cangjie_mode;
    }


RESOURCE LBUF r_aknfep_options_edit_submenu_title
    {
    txt = qtn_options_edit;
    }


RESOURCE LBUF r_aknfep_softkey_ccpu_cancel
    {
    txt = text_softkey_cancel;
    }



RESOURCE LBUF r_aknfep_softkey_ccpu_start
    {
    txt = text_softkey_start;
    }


RESOURCE LBUF r_aknfep_softkey_copy
    {
    txt = text_softkey_copy;
    }


RESOURCE LBUF r_aknfep_softkey_cut
    {
    txt = text_pup_option_cut;
    }


RESOURCE LBUF r_aknfep_options_edit_menu_copy_text
    {
    txt = qtn_editing_shift_menu_copy;
    }


RESOURCE LBUF r_aknfep_options_edit_menu_cut_text
    {
    txt = qtn_editing_shift_menu_cut;
    }

RESOURCE LBUF r_aknfep_chinese_user_db_note_only_chinese_text
    {
    txt = qtn_chi_chinese_user_db_note_only_chinese;
    }

RESOURCE LBUF r_aknfep_chinese_user_db_note_too_short_text
    {
    txt = qtn_chi_chinese_user_db_note_too_short;
    }

RESOURCE LBUF r_aknfep_chinese_user_db_note_invalid_phrase_text
    {
    txt = qtn_chi_chinese_user_db_note_invalid_phrase;
    }

RESOURCE LBUF r_aknfep_chinese_user_db_note_phrase_existed_text
    {
    txt = qtn_chi_chinese_user_db_note_already_in_db;  // change "qtn_chi_chinese_user_db_note_phrase_existed "to qtn_chi_chinese_user_db_note_already_in_db
    }

RESOURCE LBUF r_aknfep_chinese_user_db_note_not_existed_text
    {
    txt = qtn_chi_chinese_user_db_note_phrase_not_existed;
    }

RESOURCE LBUF r_aknfep_chinese_user_db_note_db_have_no_space_text
    {
    txt = qtn_chi_chinese_user_db_note_db_have_no_space;
    }

RESOURCE LBUF r_aknfep_chinese_user_db_phrase_too_long_text
    {
    txt = qtn_chi_chinese_user_db_note_phrase_too_long;
    }


//
// CBA SOFTKEYS
//
RESOURCE CBA r_aknfep_softkeys_empty_previous
    {
    buttons =
        {
        CBA_BUTTON {txt=text_softkey_empty;},
        CBA_BUTTON {id=EAknFepSoftkeyPrevious; txt=text_softkey_previous;},
        CBA_BUTTON {txt=text_softkey_empty;}
        };
    }

RESOURCE CBA r_aknfep_softkeys_spell_previous
    {
    buttons =
        {
        CBA_BUTTON {id=EAknFepSoftkeySpell; txt=text_softkey_spell;},
        CBA_BUTTON {id=EAknFepSoftkeyPrevious; txt=text_softkey_previous;},
        CBA_BUTTON {id=EAknFepSoftkeySpell; txt=text_softkey_spell;}
        };
    }

RESOURCE CBA r_aknfep_softkeys_symbol_previous
    {
    buttons =
        {
        CBA_BUTTON {id=EAknFepSoftkeySymbol; txt=text_softkey_symbol;},
        CBA_BUTTON {id=EAknFepSoftkeyPrevious; txt=text_softkey_previous;},
        CBA_BUTTON {id=EAknFepSoftkeySymbol; txt=text_softkey_symbol;}
        };
    }

RESOURCE CBA r_aknfep_softkeys_spell_empty
    {
    buttons =
        {
        CBA_BUTTON {id=EAknFepSoftkeySpell; txt=text_softkey_spell;},
        CBA_BUTTON {txt=text_softkey_empty;},
        CBA_BUTTON {txt=text_softkey_empty;}
        };
    }

// ---------------------------------------------------------------------------
// r_aknfep_softkeys_empty_cancel_select
// This CBA is used for Next word prediction popup for Japanese variant
// ---------------------------------------------------------------------------
//
RESOURCE CBA r_aknfep_softkeys_empty_cancel_select
    {
    buttons =
        {
        CBA_BUTTON {id=EAknSoftkeyEmpty; txt=text_softkey_empty;},
        CBA_BUTTON {id=EAknFepSoftkeyCloseWindow;txt=qtn_japin_edit_predict_stopprediction;},
        CBA_BUTTON {id=EAknFepSoftkeySelectCandidate;txt=qtn_msk_selectcandidate;}
        };
    }

// ---------------------------------------------------------------------------
// r_aknfep_softkeys_convert_empty_select
// This CBA is used for Prediction popup for Japanese variant
// ---------------------------------------------------------------------------
//
RESOURCE CBA r_aknfep_softkeys_convert_other_select
    {
    buttons =
        {
        CBA_BUTTON {id=EAknFepSoftkeyConvert; txt=text_softkey_convert;},
        CBA_BUTTON {id=EAknFepSoftkeyOtherModes; txt=qtn_japin_edit_othermodes;},
        CBA_BUTTON {id=EAknFepSoftkeySelectCandidate;txt=qtn_msk_selectcandidate;}
        };
    }

// ---------------------------------------------------------------------------
// r_aknfep_softkeys_predict_other_commit
// This CBA is used for transitory input without showing candidate
// and being available predictive input for Japanese variant
// ---------------------------------------------------------------------------
//
RESOURCE CBA r_aknfep_softkeys_predict_other_commit
    {
    buttons =
        {
        CBA_BUTTON {id=EAknFepSoftkeyPredictiveOn; txt=qtn_japin_edit_predict_startprediction;},
        CBA_BUTTON {id=EAknFepSoftkeyOtherModes; txt=qtn_japin_edit_othermodes;},
        CBA_BUTTON {id=EAknFepSoftkeyCommit;txt=qtn_msk_commit;}
        };
    }

// ---------------------------------------------------------------------------
// r_aknfep_softkeys_predict_other_commit
// This CBA is used for transitory input without showing candidate
// and being not available predictive input for Japanese variant
// ---------------------------------------------------------------------------
//
RESOURCE CBA r_aknfep_softkeys_empty_other_commit
    {
    buttons =
        {
        CBA_BUTTON {id=EAknSoftkeyEmpty;txt=text_softkey_empty;},
        CBA_BUTTON {id=EAknFepSoftkeyOtherModes; txt=qtn_japin_edit_othermodes;},
        CBA_BUTTON {id=EAknFepSoftkeyCommit;txt=qtn_msk_commit;}
        };
    }

// ---------------------------------------------------------------------------
// r_aknfep_softkeys_empty_empty_commit
// This CBA is used for Candidate popup for Japanese variant
// ---------------------------------------------------------------------------
//
RESOURCE CBA r_aknfep_softkeys_empty_empty_commit
    {
    buttons =
        {
        CBA_BUTTON {id=EAknSoftkeyEmpty;txt=text_softkey_empty;},
        CBA_BUTTON {id=EAknSoftkeyEmpty;txt=text_softkey_empty;},
        CBA_BUTTON {id=EAknFepSoftkeyCommit;txt=qtn_msk_commit;}
        };
    }

// ---------------------------------------------------------------------------
// r_aknfep_softkeys_retroactive_half_width
// This CBA is used for Retroactive popup for Japanese variant
// ---------------------------------------------------------------------------
//
RESOURCE CBA r_aknfep_softkeys_retroactive_half_width
    {
    buttons =
        {
        CBA_BUTTON {id=EAknFepSoftkeyRetroActiveHalf; txt=qtn_japin_edit_half_width;},
        CBA_BUTTON {id=EAknSoftkeyEmpty; txt=text_softkey_empty;},
        CBA_BUTTON {id=EAknFepSoftkeyCommit;txt=qtn_msk_commit;}
        };
    }

// ---------------------------------------------------------------------------
// r_aknfep_softkeys_retroactive_full_width
// This CBA is used for Retroactive popup for Japanese variant
// ---------------------------------------------------------------------------
//
RESOURCE CBA r_aknfep_softkeys_retroactive_full_width
    {
    buttons =
        {
        CBA_BUTTON {id=EAknFepSoftkeyRetroActiveFull; txt=qtn_japin_edit_full_width;},
        CBA_BUTTON {id=EAknSoftkeyEmpty; txt=text_softkey_empty;},
        CBA_BUTTON {id=EAknFepSoftkeyCommit;txt=qtn_msk_commit;}
        };
    }

// ---------------------------------------------------------------------------
// r_aknfep_text_kuten_invalid_error
// This string is used for Kuten input for Japanese variant
// ---------------------------------------------------------------------------
//
RESOURCE LBUF r_aknfep_text_kuten_invalid_error
    {
    txt = qtn_japin_text_kuten_code_invalid_error;
    }

RESOURCE HASH_KEY_LOOP r_hash_key_loop_all_input_modes
    {
    modes =
        {
        NUMBER_INT32
            {
            value = EHiraganaKanji;
            },
        NUMBER_INT32
            {
            value = EKatakana;
            },
        NUMBER_INT32
            {
            value = EPRCFind;
            },
        NUMBER_INT32
            {
            value = EPinyin;
            },
        NUMBER_INT32
            {
            value = EZhuyinFind;
            },
        NUMBER_INT32
            {
            value = EZhuyin;
            },
        NUMBER_INT32
            {
            value = EStrokeFind;
            },
        NUMBER_INT32
            {
            value = EStroke;
            },
        NUMBER_INT32
            {
            value = ECangJie;
            },
        NUMBER_INT32
            {
            value = EHangul;
            },
        NUMBER_INT32
            {
            value = ELatin;
            },
        NUMBER_INT32
            {
            value = ENumber;
            },
        NUMBER_INT32
            {
            value = EHindi;
            },
        NUMBER_INT32
            {
            value = ENativeNumber;
            }   
        };
    }


RESOURCE TBUF r_aknfep_number_mode_keymap_standard { buf = aknfep_number_mode_keymap_standard; }
RESOURCE TBUF r_aknfep_number_mode_keymap_plain { buf = aknfep_number_mode_keymap_plain; }
RESOURCE TBUF r_aknfep_number_mode_keymap_calculator { buf = aknfep_number_mode_keymap_calculator; }
RESOURCE TBUF r_aknfep_number_mode_keymap_converter { buf = aknfep_number_mode_keymap_converter; }
RESOURCE TBUF r_aknfep_number_mode_keymap_to_field { buf = aknfep_number_mode_keymap_to_field; }
RESOURCE TBUF r_aknfep_number_mode_keymap_fixed_dialling { buf = aknfep_number_mode_keymap_fixed_dialling; }
RESOURCE TBUF r_aknfep_number_mode_keymap_sat { buf = aknfep_number_mode_keymap_sat; }
RESOURCE TBUF r_aknfep_number_mode_keymap_sat_hidden { buf = aknfep_number_mode_keymap_sat_hidden; }


RESOURCE MENU_PANE r_aknfep_edit_submenu
    {
    items=
        {
    MENU_ITEM
        {
        command = EAknEditMenuCmdCopyText;
        txt = qtn_editing_shift_menu_copy;
        },
    MENU_ITEM
        {
        command = EAknEditMenuCmdCutText;
        txt = qtn_editing_shift_menu_cut;
        },
    MENU_ITEM
        {
        command = EEikCmdEditCopy;
        txt = text_pup_option_copy;
        },    
    MENU_ITEM
        {
        command = EEikCmdEditCut;
        txt = text_pup_option_cut;
        },
    MENU_ITEM
        {
        command = EEikCmdEditPaste;
        txt = text_pup_option_paste;
        }
      };
    }


// For stylus ccpu-menu.
RESOURCE LBUF r_aknfep_stylus_ccpu_menu_paste
    {
    txt = text_pup_option_paste;
    }

RESOURCE CBA r_aknfep_softkeys_finger
    {
    buttons = 
        {
        CBA_BUTTON {id=EAknSoftkeyOptions; txt=text_softkey_option;},
        CBA_BUTTON {id=EAknSoftkeyOk; txt=text_softkey_ok;},
        CBA_BUTTON {id=EAknSoftkeyEmpty; txt=text_softkey_empty;}        
        };
    }

RESOURCE CBA r_aknfep_softkeys_finger_option_previous
    {
    buttons = 
        {
        CBA_BUTTON {id=EAknSoftkeyOptions; txt=text_softkey_option;},
        CBA_BUTTON {id=EAknFepSoftkeyPrevious; txt=text_softkey_previous;},
        CBA_BUTTON {id=EAknSoftkeyEmpty; txt=text_softkey_empty;}
        };
    }
    
RESOURCE CBA r_aknfep_softkeys_finger_spell_previous
    {
    buttons = 
        {
        CBA_BUTTON {id=EAknFepSoftkeySpell; txt=text_softkey_spell;},
        CBA_BUTTON {id=EAknFepSoftkeyPrevious; txt=text_softkey_previous;},
        CBA_BUTTON {id=EAknSoftkeyEmpty; txt=text_softkey_empty;}
        };
    }
    
RESOURCE CBA r_aknfep_softkeys_finger_ok_cancel
    {
    buttons = 
        {
        CBA_BUTTON {id=EAknSoftkeyOk; txt=text_softkey_ok;},
        CBA_BUTTON {id=EAknSoftkeyCancel; txt=text_softkey_cancel;},
        CBA_BUTTON {id=EAknSoftkeyEmpty; txt=text_softkey_empty;}
        };
    }    
       
RESOURCE CBA r_aknfep_softkeys_finger_cancel
    {
    buttons = 
        {
        CBA_BUTTON {id=EAknSoftkeyEmpty; txt=text_softkey_empty;},
        CBA_BUTTON {id=EAknSoftkeyCancel; txt=text_softkey_cancel;},
        CBA_BUTTON {id=EAknSoftkeyEmpty; txt=text_softkey_empty;}
        };
    }     
       
RESOURCE TBUF r_aknfep_prompt_text
    {
    buf = text_t9_edit_query;
    }   
#ifdef RD_INTELLIGENT_TEXT_INPUT

RESOURCE TBUF r_aknfep_pred_input_settings_title
    {
    buf = qtn_pred_input_settings_title;
    }
    
    
RESOURCE TBUF r_aknfep_pred_options_input_options
    {
    buf = qtn_pred_options_input_options;
    }

//
// CBA SOFTKEYS
//
RESOURCE CBA r_aknfep_softkeys_spell_cancel_select
    {
    buttons=
        {
        CBA_BUTTON {id=EAknFepSoftkeySpell; txt=text_softkey_spell;},
        CBA_BUTTON {id=EAknSoftkeyCancel; txt=text_softkey_cancel;},
        CBA_BUTTON {id=EAknSoftkeySelect; txt=text_softkey_select;}
        };
    }

RESOURCE CBA r_aknfep_softkeys_options_back_change
	{
	buttons=
	    {
	    CBA_BUTTON {id=EAknSoftkeyOptions; txt=text_softkey_option;},
	    CBA_BUTTON {id=EAknSoftkeyBack; txt=text_softkey_back;},
	    CBA_BUTTON {id=EAknSoftkeyChange; txt=qtn_msk_change;}
	    };
	}

RESOURCE CBA r_aknfep_softkeys_options_back__context_options
    {
    buttons=
        {
        CBA_BUTTON {id=EAknSoftkeyOptions; txt=text_softkey_option;},
        CBA_BUTTON {id=EAknSoftkeyBack; txt=text_softkey_back;},
        CBA_BUTTON {id=EAknSoftkeyContextOptions; txt=text_softkey_option;}
        };
    }

// For Input Ooption Menu
RESOURCE MENU_PANE r_aknfep_pred_input_options_submenu
{
items=
    {
   MENU_ITEM
        {
        command = EAknFepCmdPredActivate;
        txt = qtn_pred_options_predictive_input_activate;
        },
   MENU_ITEM
        {
        command = EAknFepCmdPredDeactivate;
        txt = qtn_pred_options_predictive_input_deactivate;
        },
#ifdef __USER_DICTIONARY_EDITING__ 
   MENU_ITEM
        {
        command = EAknFepCmdPredEditUserDictionary;
        txt = qtn_pred_options_user_dictionary;
        },
#endif //__USER_DICTIONARY_EDITING__ 
    MENU_ITEM
        {
        command = EAknFepCmdPredSettings;
        txt = qtn_pred_options_settings;
        },
   MENU_ITEM
        {
        command = EAknFepCmdPredInputLanguage;
        txt = qtn_pred_options_input_language;
        },
    MENU_ITEM
        {
        command = EAknFepCmdPredHelp;
        txt = qtn_pred_suboption_help;
        }
    };
}


// For Setting Dialog
// ---------------------------------------------------------
//   
//   r_predictivesettingdialog_menubar
//   Menubar for predictive setting dialog
//
// ---------------------------------------------------------
//
RESOURCE MENU_BAR r_predictivesettingdialog_menubar
    {
    titles =
        {
        MENU_TITLE 
			{
			menu_pane = r_predictivesettingdialog_menu;
			}
        };
    }


// ---------------------------------------------------------
//   
//   r_predictivesettingdialog_menu
//   Menu for "Options"
//
// ---------------------------------------------------------
//
RESOURCE MENU_PANE r_predictivesettingdialog_menu
    {
    items = 
        {
        // added the new Options menu command here
        MENU_ITEM 
		    {
			command = EAknFepCmdPredSettingChange;  
			txt = qtn_options_change;
			},
		MENU_ITEM 
		    {
			command = EAknCmdHelp;  
			txt = qtn_options_help;
			},
        MENU_ITEM 
		    {
			command = EAknCmdExit;   
			txt = qtn_options_exit;
			}
        };
    }


	
RESOURCE DIALOG r_predictivesetting_dialog
{
	flags   = EEikDialogFlagNoDrag | EEikDialogFlagFillAppClientRect | 
			  EEikDialogFlagWait | EEikDialogFlagCbaButtons;

	//Buttons are Select and Back
	buttons = r_aknfep_softkeys_options_back_change;
	
	items =
	{
		DLG_LINE
		{
			// This is the control type - its our own setting item list custom control 
			type 	= 	EAknCtLastControlId;
			
			// This is the dialog id - any value can be used as there are no 
			//		other controls on the dialog
			id 		= 	12;
			
			itemflags	=	EEikDlgItemTakesEnterKey;
			
			// the control data is a setting item list 
			control = AVKON_SETTING_ITEM_LIST 
			{ 
				
				// These are the settings we want to edit 
				items = 
				{
				AVKON_SETTING_ITEM
		            {
		            identifier = EAknFepCmdPredAutoComplSetting;
					setting_page_resource = r_autowordcompl_page;
		            associated_resource = r_autowordcompl_setting_texts;
		            name = qtn_pred_word_completion;
		            },
				AVKON_SETTING_ITEM
					{
					identifier = EAknFepCmdPredAutoComplMultiSetting;
					setting_page_resource = r_autowordcomplmulti_page;
					name = qtn_pred_word_completion;
					},
				AVKON_SETTING_ITEM
					{
					identifier = EAknFepCmdPredTypingCorrectionSetting;
					setting_page_resource = r_typingcorrection_page;
					associated_resource = r_typingcorrection_page_texts;		// gives available options
					name = qtn_pred_typing_correction;
					},
				AVKON_SETTING_ITEM
					{
					identifier = EAknFepCmdPredNumberCandidateSetting;
					setting_page_resource = r_numbercandidates_page;
					associated_resource = r_numbercandidates_setting_texts;
					name = qtn_pred_number_candidates;
					},
			
		        AVKON_SETTING_ITEM
					{
		            identifier = EAknFepCmdPredPrimaryCandidateSetting;
					setting_page_resource = r_primarycandidate_page;
		            associated_resource = r_primarycandidate_setting_texts;
		            name = qtn_pred_primary_candidate;
		            }
				};
			};
		}
	};	
}
// ---------------------------------------------------------
//   
// Settings Pages
//
// defines the AVKON_SETTING_PAGE structures referred to in 
// setting_page_resource fields above.
// 
// ---------------------------------------------------------
//   

RESOURCE AVKON_SETTING_PAGE r_autowordcompl_page
	{
	label=qtn_pred_word_completion;
	type = EAknCtPopupSettingList;
	editor_resource_id = r_autowordcompl;
	}

RESOURCE AVKON_SETTING_PAGE r_autowordcomplmulti_page
	{
	label=qtn_pred_word_completion;
	type = EAknCtPopupSettingList;
	editor_resource_id = r_autowordcomplmulti;
	softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__MARK;
	}

RESOURCE AVKON_SETTING_PAGE r_typingcorrection_page
	{
	label=qtn_pred_typing_correction;
	type = EAknCtPopupSettingList;
	editor_resource_id = r_typingcorrection;
	}

RESOURCE AVKON_SETTING_PAGE r_numbercandidates_page
	{
	label=qtn_pred_number_candidates;
	type = EAknCtPopupSettingList;
	editor_resource_id = r_numbercandidates;
	}
	
RESOURCE AVKON_SETTING_PAGE r_primarycandidate_page
	{
	label=qtn_pred_primary_candidate;
	type = EAknCtPopupSettingList;
	editor_resource_id = r_primarycandidate;
	}
	

// ---------------------------------------------------------
//   
// Editor Controls
//
// This section defines the controls referred to from the
// editor_resource_id sections of the AVKON_SETTING_PAGE
// resources above.
// 
// ---------------------------------------------------------
//   	

RESOURCE POPUP_SETTING_LIST r_autowordcompl
	{
	}

RESOURCE POPUP_SETTING_LIST r_autowordcomplmulti
	{
	}

RESOURCE POPUP_SETTING_LIST r_typingcorrection
	{
	}

RESOURCE POPUP_SETTING_LIST r_numbercandidates
	{
	}
	
RESOURCE POPUP_SETTING_LIST r_primarycandidate
	{
	}

// ---------------------------------------------------------
//   
// Second level structures used from settings pages
// Defines - text strings to be used in display, 
// and their mapping to enumerated values.
// 
// ---------------------------------------------------------
// 


RESOURCE AVKON_POPUP_SETTING_TEXTS r_autowordcompl_setting_texts
	{
	setting_texts_resource = r_autowordcompl_settingitem_texts;
	}

RESOURCE ARRAY r_autowordcompl_settingitem_texts
	{
	items =
	    {
	    AVKON_ENUMERATED_TEXT
	        {
	        value = 1;
	        text = qtn_pred_autocompl_on;
	        },
	    AVKON_ENUMERATED_TEXT
	        {
	        value = 0;
	        text = qtn_pred_autocompl_off;
	        }
	    };
	}
	
RESOURCE AVKON_POPUP_SETTING_TEXTS r_autowordcomplmulti_setting_texts
	{
	setting_texts_resource = r_autowordcomplmulti_settingitem_texts;
	popped_up_texts_resource = r_autowordcomplmulti_editor_texts;
	}	

RESOURCE ARRAY r_autowordcomplmulti_settingitem_texts
	{
	items =
	    {
	    AVKON_ENUMERATED_TEXT
	        {
	        value = 0;
	        text = qtn_pred_setting_itut;
	        },
	    AVKON_ENUMERATED_TEXT
	        {
	        value = 1;
	        text = qtn_pred_setting_qwerty;
	        },
        AVKON_ENUMERATED_TEXT
	        {
	        value = 2;
	        text = qtn_pred_setting_half_qwerty;
	        }
	    };
	}

RESOURCE TBUF r_aknfep_pred_setting_itut
    {
    buf = qtn_pred_setting_itut;
    }

RESOURCE TBUF r_aknfep_pred_setting_qwerty
    {
    buf = qtn_pred_setting_qwerty;
    }
RESOURCE TBUF r_aknfep_pred_setting_half_qwerty
    {
    buf = qtn_pred_setting_half_qwerty;
    } 
RESOURCE ARRAY r_autowordcomplmulti_editor_texts
	{
	items = 
		{
		LBUF { txt = qtn_pred_setting_itut;},
		LBUF { txt = qtn_pred_setting_qwerty;}
		};
	}
	
RESOURCE AVKON_POPUP_SETTING_TEXTS r_typingcorrection_page_texts
	{
	setting_texts_resource = r_typingcorrection_item_texts;
	popped_up_texts_resource = r_typingcorrection_editor_texts;
	}
	
RESOURCE ARRAY r_typingcorrection_item_texts
	{
	items =
	    {
	    AVKON_ENUMERATED_TEXT
	        {
	        value = 2;
	        text = qtn_pred_correction_high;
	        },
	    AVKON_ENUMERATED_TEXT
	        {
	        value = 1;
	        text = qtn_pred_correction_medium;
	        },
		AVKON_ENUMERATED_TEXT
	        {
	        value = 0;
	        text = qtn_pred_correction_off;
	        }
	    };
	}

RESOURCE ARRAY r_typingcorrection_editor_texts
	{
	items = 
		{
		LBUF { txt = qtn_pred_correction_high;},
		LBUF { txt = qtn_pred_correction_medium;},
		LBUF { txt = qtn_pred_correction_off;}
		};
	}

	

RESOURCE AVKON_POPUP_SETTING_TEXTS r_numbercandidates_setting_texts
	{
	setting_texts_resource = r_numbercandidates_settingitem_texts;
	}

RESOURCE ARRAY r_numbercandidates_settingitem_texts
	{
	items =
	    {
	    AVKON_ENUMERATED_TEXT
	        {
	        value = 1;
	        text = qtn_pred_number_cand_shown;
	        },
	    AVKON_ENUMERATED_TEXT
	        {
	        value = 0;
	        text = qtn_pred_number_cand_not_shown;
	        }
	    };
	}
	
	
RESOURCE AVKON_POPUP_SETTING_TEXTS r_primarycandidate_setting_texts
	{
	setting_texts_resource = r_primarycandidate_settingitem_texts;
	}

RESOURCE ARRAY r_primarycandidate_settingitem_texts
	{
	items =
	    {
	    AVKON_ENUMERATED_TEXT
	        {
	        value = 0;
	        text = qtn_pred_primary_cand_suggested;
	        },
	    AVKON_ENUMERATED_TEXT
	        {
	        value = 1;
	        text = qtn_pred_primary_cand_actually_entered;
	        }
	    };
	}
	
		
RESOURCE DIALOG r_predictivetextoff_confirmation_query
	{
	flags = EGeneralQueryFlags;
	buttons = R_AVKON_SOFTKEYS_YES_NO;
	items =
		{
		DLG_LINE
			{
			type = EAknCtQuery;
			id = EGeneralQuery;
			control = AVKON_CONFIRMATION_QUERY
				{
				layout = EConfirmationQueryLayout;
				label = qtn_pred_turn_input_on_query;
				};
			}
		};
	}
RESOURCE TBUF r_aknfep_pred_settings_closed
    {
    buf = qtn_pred_settings_closed;
    }

#ifdef __USER_DICTIONARY_EDITING__ 
// For User Dictionary editing ->

RESOURCE MENU_BAR r_udb_edit_options_menubar
     {
     titles =
         {
         MENU_TITLE { menu_pane = r_udb_edit_options_help_exit; },
         MENU_TITLE { menu_pane = R_AVKON_MENUPANE_MARKABLE_LIST; },
         MENU_TITLE { menu_pane = r_udb_edit_options_menupane; }
         };
     }

RESOURCE MENU_PANE r_udb_edit_options_menupane
    {
    items=
        {
        MENU_ITEM
            {
            command = EAknFepPredDictionaryCmdEdit;
            txt = qtn_pred_dictionary_option_edit;
            },
        MENU_ITEM
            {
            command=EAknFepPredDictionaryCmdAdd; 
            txt=qtn_pred_dictionary_option_add;
            },
        MENU_ITEM
            {
            command=EAknFepPredDictionaryCmdDelete; 
            txt=qtn_pred_dictionary_option_delete;
            }
        
        };
    }

RESOURCE MENU_PANE r_udb_edit_options_help_exit
    {
    items=
        {
        MENU_ITEM 
            {
            command = EAknCmdHelp;  
            txt = qtn_options_help;
            },
        MENU_ITEM 
            {
            command = EAknCmdExit;   
            txt = qtn_options_exit;
            }
        };
    }

RESOURCE DIALOG r_user_dictionary_editing_dialog 
    {
    flags = EEikDialogFlagWait | EEikDialogFlagFillAppClientRect | EAknDialogMarkableList;
    buttons = r_aknfep_softkeys_options_back__context_options; 
    items = 
        {
        DLG_LINE
            {
            type = EAknCtSingleGraphicListBox;
            id = ESelectionListControl;
            itemflags = EEikDlgItemTakesEnterKey;
            control = LISTBOX
                {
                flags = EAknListBoxMarkableList;
                };                
            },
        DLG_LINE
            {
            itemflags = EEikDlgItemNonFocusing;
            id = EFindControl;
            type = EAknCtSelectionListFixedFind;
            }
        };
    }

RESOURCE DIALOG r_aknfep_pred_delete_confirmation_query
    {
    flags = EGeneralQueryFlags;
    buttons = R_AVKON_SOFTKEYS_YES_NO;
    items =
        {
        DLG_LINE
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            control = AVKON_CONFIRMATION_QUERY
                {
                layout = EConfirmationQueryLayout;
                };
            }
        };
    }

RESOURCE DIALOG r_aknfep_pred_user_dictionary_word_query
    {
    flags=EGeneralQueryFlags;
    buttons=R_AVKON_SOFTKEYS_OK_CANCEL;
    items=
        {
        DLG_LINE
            {
            type=EAknCtQuery;
            id=EGeneralQuery;
            control= AVKON_DATA_QUERY
                {
                    layout = EDataLayout;
                    control=EDWIN
                        {
                        default_case = EAknEditorLowerCase; 
                        allowed_case_modes = EAknEditorLowerCase | EAknEditorUpperCase;
                        };
                };
            }
        };
    }

RESOURCE TBUF r_aknfep_pred_userdict_editing_title
    {
    buf = qtn_pred_input_dictionary_editing_title;
    }
RESOURCE TBUF r_aknfep_pred_user_dictionary_heading_empty
    {
    buf = qtn_pred_dictionary_editing_heading_empty;
    }
RESOURCE TBUF r_aknfep_pred_user_dictionary_empty
    {
    buf = qtn_pred_dictionary_editing_empty;
    }
RESOURCE TBUF r_aknfep_pred_edit_query
    {
    buf = text_t9_edit_query;
    }
RESOURCE TBUF r_aknfep_pred_add_query
    {
    buf = text_t9_spell_query;
    }
RESOURCE TBUF r_aknfep_pred_delete_1_query
    {
    buf = qtn_pred_dictionary_option_confirm_1_deletion;
    }
RESOURCE TBUF r_aknfep_pred_delete_many_query
    {
    buf = qtn_pred_dictionary_option_confirm_deletions;
    }
RESOURCE TBUF r_aknfep_pred_msk_add_new
    {
    buf = qtn_msk_pred_add_new;
    }
RESOURCE TBUF r_aknfep_pred_msk_edit
    {
    buf = qtn_msk_edit;
    }
RESOURCE TBUF r_aknfep_pred_msk_context_options
    { 
    buf = text_softkey_option; 
    }
#endif //__USER_DICTIONARY_EDITING__

#ifdef FF_DUAL_LANGUAGE_SUPPORT
RESOURCE TBUF r_secondary_writing_lang_none
    {
    buf = qtn_set_secondary_writing_lang_none;
    }

RESOURCE TBUF r_input_language_settings_title
    {
    buf = qtn_set_title_settings_writing_language;
    }
RESOURCE AVKON_POPUP_SETTING_TEXTS r_language_setting_texts
    {
    setting_texts_resource = r_language_settingitem_texts;
    }   

RESOURCE ARRAY r_language_settingitem_texts
    {
    items =
        {
        AVKON_ENUMERATED_TEXT
            {
            value = 0;
            text = qtn_set_secondary_writing_lang_none;
            }
        };
    }
RESOURCE DIALOG r_inputlanguage_dialog
{
    flags   = EEikDialogFlagNoDrag | EEikDialogFlagFillAppClientRect | 
              EEikDialogFlagWait | EEikDialogFlagCbaButtons;

    buttons = r_aknfep_softkeys_options_back_change;
    
    items =
    {
        DLG_LINE
        {
            // This is the control type - its our own setting item list custom control 
            type    =   EAknCtLastControlId;
            
            // This is the dialog id - any value can be used as there are no 
            //      other controls on the dialog
            id      =   12;
            
            itemflags	=	EEikDlgItemTakesEnterKey;

            // the control data is a setting item list 
            control = AVKON_SETTING_ITEM_LIST 
            { 
                
                // These are the settings we want to edit 
                items = 
                {
                AVKON_SETTING_ITEM
                    {
                    identifier = EAknFepDualLanguageSettingDualInputPrimary;
                    setting_page_resource = r_primary_input_language_setting_page;
                    associated_resource = r_language_setting_texts;
                    name = qtn_set_primary_writing_language;
                    },
                AVKON_SETTING_ITEM
                    {
                    identifier = EAknFepDualLanguageSettingDualInputSecondary;
                    setting_page_resource = r_secondary_input_language_setting_page;
                    associated_resource = r_language_setting_texts;
                    name = qtn_set_secondary_writing_language;
                    }
                };
            };
        }
    };  
}

RESOURCE POPUP_SETTING_LIST r_lang_editor
    {
    }

RESOURCE AVKON_SETTING_PAGE r_primary_input_language_setting_page
    {
    // don't show setting number in setting page
    number = EAknSettingPageNoOrdinalDisplayed;
    label = qtn_set_primary_writing_language; //localised string for setting page label
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK; // softkeys for setting page
    type = EAknCtPopupSettingList; // setting page type
    editor_resource_id = r_lang_editor; // setting page editor
    }

RESOURCE AVKON_SETTING_PAGE r_secondary_input_language_setting_page
    {
    // don't show setting number in setting page
    number = EAknSettingPageNoOrdinalDisplayed;
    label = qtn_set_secondary_writing_language; //localised string for setting page label
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK; // softkeys for setting page
    type = EAknCtPopupSettingList; // setting page type
    editor_resource_id = r_lang_editor; // setting page editor
    }
#endif //FF_DUAL_LANGUAGE_SUPPORT
// Predictive QWERTY (XT9) changes <----
#endif //RD_INTELLIGENT_TEXT_INPUT
// -----------------------------------------------------------------------------
//
//   r_aknfep_userdb_dlg_menubar
//   Main menubar for use DB management dialog
//
// -----------------------------------------------------------------------------
//
RESOURCE MENU_BAR r_aknfep_userdb_dlg_menubar
    {
    titles =
        {
        MENU_TITLE
            {menu_pane = r_aknfep_userdb_dlg_menu;}
        };
    }

// -----------------------------------------------------------------------------
//
//   r_aknfep_userdb_dlg_menu
//   Menu for "Options in user DB management dialog"
//
// -----------------------------------------------------------------------------
//
RESOURCE MENU_PANE r_aknfep_userdb_dlg_menu
    {
    items =
        {
        MENU_ITEM
            {
            command = EAknCmdUserDBAdd;
            txt = qtn_chi_chinese_user_db_options_new;// change "qtn_chi_chinese_user_db_options_add" to "qtn_chi_chinese_user_db_options_new";
            },
        MENU_ITEM
            {
            command = EAknCmdUserDBEdit;
            txt = qtn_chi_chinese_user_db_options_edit;
            },
        MENU_ITEM
            {
            command = EAknCmdUserDBDelete;
            txt = qtn_chi_chinese_user_db_delete;
            },
        MENU_ITEM
            {
            command = EAknCmdMarkOrUnmark;
            txt = qtn_options_list;
            cascade = r_aknfep_mark_unmark_menupane;
            }
        };
    }


RESOURCE MENU_PANE r_aknfep_mark_unmark_menupane
    {
    items =
        {
        MENU_ITEM
            {
            command = EAknCmdMark;
            txt = qtn_options_list_mark_one;
            },
        MENU_ITEM
            {
            command = EAknCmdUnmark;
            txt = qtn_options_list_unmark_one;
            },
        MENU_ITEM
            {
            command = EAknMarkAll;
            txt = qtn_options_list_mark_all;
            },
        MENU_ITEM
            {
            command = EAknUnmarkAll;
            txt = qtn_options_list_unmark_all;
            }
        };
    }

// -----------------------------------------------------------------------------
//
// r_aknfep_listbox_data_query_dialog
// Data query for add phrase.
//
// -----------------------------------------------------------------------------
// 
RESOURCE DIALOG r_aknfep_listbox_data_query_dialog
    {
    flags = EGeneralQueryFlags;
    buttons = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    items =
        {
        DLG_LINE
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            control = AVKON_DATA_QUERY
                {
                layout = EDataLayout;
//                label = STRING_r_listbox_add_item_dialog;
                control = EDWIN
                    {
                    flags = EEikEdwinNoHorizScrolling | EEikEdwinResizable;
                    maxlength = 7;
                    };
                };
            }
        };
    }

// -----------------------------------------------------------------------------
//
// r_aknfep_listdlg_dialog
// Dialog for user DB management
//
// -----------------------------------------------------------------------------
// 
RESOURCE DIALOG r_aknfep_listdlg_dialog
    {
    flags = EAknDialogSelectionList | EEikDialogFlagNotifyEsc;
    buttons = r_aknfep_softkeys_list_options_exit_context;
    items =
        {
        DLG_LINE
            {
            type = EAknCtSingleGraphicListBox;
            id = ESelectionListControl;
            control= LISTBOX
                {
                flags = EAknListBoxMarkableList|EEikDialogFlagFillAppClientRect;
                };
            },
        DLG_LINE
            {
            itemflags = EEikDlgItemNonFocusing;
            id = EFindControl;
            type = EAknCtSelectionListFixedFind;
            }
        };
    }

RESOURCE CBA r_aknfep_softkeys_list_options_exit_context
    {
    buttons =
        {
        CBA_BUTTON {id=EAknSoftkeyOptions; txt=text_softkey_option;},
        CBA_BUTTON {id=EAknSoftkeyExit; txt=text_softkey_exit;},
        CBA_BUTTON {id=EAknSoftkeyContextOptions; txt=text_softkey_option;}   
        };
    }

// for context
RESOURCE MENU_BAR r_aknfep_userdb_dlg_context_menubar
    {
    titles =
        {
        MENU_TITLE
            {menu_pane = r_aknfep_userdb_dlg_context_menu;}
        };
    }

RESOURCE MENU_PANE r_aknfep_userdb_dlg_context_menu
    {
    items =
        {
        MENU_ITEM
            {
            command = EAknCmdUserDBEdit;
            txt = qtn_chi_chinese_user_db_options_edit;
            },
        MENU_ITEM
            {
            command = EAknCmdUserDBDelete;
            txt = qtn_chi_chinese_user_db_delete;
            },
        MENU_ITEM
            {
            command = EAknCmdMarkOrUnmark;
            txt = qtn_options_list;
            cascade = r_aknfep_mark_unmark_menupane;
            }
        };
    }

RESOURCE TBUF r_aknfep_delete_confirmation_text
    {
    buf = "Delete %N Phrase?";   //change "qtn_chi_chinese_user_db_query_delete_phrases" to "qtn_chi_chinese_user_db_query_delete_phrase"
    } 

RESOURCE TBUF r_aknfep_user_db_management_title
    {
    buf =qtn_chi_chinese_user_db_title; // change "qtn_chi_chinese_user_db_management_title" to "qtn_chi_chinese_user_db_title";
    }

RESOURCE TBUF r_aknfep_user_db_list_no_item_text
    {
    buf = qtn_chi_chinese_user_db_empty;
    }

RESOURCE TBUF r_aknfep_user_db_list_add_item_text
    {
    buf = qtn_chi_chinese_user_db_query_add; //change the "STRING_r_listbox_add_item_dialog" to " qtn_chi_chinese_user_db_query_add"
    }

RESOURCE TBUF r_aknfep_user_db_list_edit_item_text
    {
    buf = qtn_chi_chinese_user_db_options_edit;  //change the  "STRING_r_listbox_edit_item_dialog" to "qtn_chi_chinese_user_db_options_edit"
    }
     
RESOURCE DIALOG r_aknfep_delete_query_dialog
    {
    flags = EGeneralQueryFlags;
    buttons = R_AVKON_SOFTKEYS_YES_NO;
    items =
        {
        DLG_LINE
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            control = AVKON_CONFIRMATION_QUERY
                {
                layout = EConfirmationQueryLayout;
                };
            }
        };
    }

//CBA add-add-exit
RESOURCE CBA r_aknfep_softkeys_list_add_exit
    {
    buttons =
        {
        CBA_BUTTON {id=EAknCmdUserDBAdd;txt=qtn_chi_chinese_user_db_softkey_new;},// change "qtn_chi_chinese_user_db_options_add" to "qtn_chi_chinese_user_db_softkey_new" ;},
        CBA_BUTTON {id=EAknSoftkeyExit; txt=text_softkey_exit;},
        CBA_BUTTON {id=EAknCmdUserDBAdd;txt=qtn_chi_chinese_user_db_softkey_new;} //change "qtn_chi_chinese_user_db_options_add" to "qtn_chi_chinese_user_db_softkey_new"
        };
    }

//CBA options-mark/unmark-exit
RESOURCE CBA r_aknfep_softkeys_list_options_exit_unmark
    {
    buttons =
        {
        CBA_BUTTON {id=EAknSoftkeyOptions;txt=text_softkey_option;},
        CBA_BUTTON {id=EAknSoftkeyExit; txt=text_softkey_exit;},
        CBA_BUTTON {id=EAknSoftkeyUnmark;}
        };
    }

RESOURCE CBA r_aknfep_softkeys_list_options_exit_mark
    {
    buttons =
        {
        CBA_BUTTON {id=EAknSoftkeyOptions;txt=text_softkey_option;},
        CBA_BUTTON {id=EAknSoftkeyExit; txt=text_softkey_exit;},
        CBA_BUTTON {id=EAknSoftkeyMark;}
        };
    }

RESOURCE DIALOG r_aknfep_wait_dialog
    {
    flags = EAknProgressNoteFlags;
    buttons = R_AVKON_SOFTKEYS_EMPTY;
    items =
        {
        DLG_LINE
            {
            type = EAknCtNote;
            id = EProgressNoteId;
            control = AVKON_NOTE
                {
                layout = EProgressLayout;
                singular_label = qtn_chi_chinese_user_db_note_deleting_phrases;
                imagefile = "z:\\resource\apps\avkon2.mbm";
                imageid = EMbmAvkonQgn_note_erased;
                imagemask = EMbmAvkonQgn_note_erased_mask;
                };
            }
        };
    }

//CBA Done-Done-Cancel
RESOURCE CBA r_aknfep_softkeys_done_cancel_done
    {
    buttons =
        {
        CBA_BUTTON {id=EAknSoftkeyDone;txt=text_softkey_done;},
        CBA_BUTTON {id=EAknSoftkeyCancel;txt=text_softkey_cancel;},
        CBA_BUTTON {id=EAknSoftkeyDone;}
        };
    }

RESOURCE DIALOG r_aknfep_quit_phrase_creation_query_dialog
    {
    flags = EGeneralQueryFlags;
    buttons = R_AVKON_SOFTKEYS_YES_NO;
    items =
        {
        DLG_LINE
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            control = AVKON_CONFIRMATION_QUERY
                {
                layout = EConfirmationQueryLayout;
                };
            }
        };
    }

RESOURCE CBA r_aknfep_softkeys__phrase_creation_empty_cancel_empty
    {
    buttons =
        {
        CBA_BUTTON {id=EAknSoftkeyEmpty;txt=text_softkey_empty;},
        CBA_BUTTON {id=EAknSoftkeyCancel; txt=text_softkey_cancel;},
        CBA_BUTTON {id=EAknSoftkeyEmpty;}
        };
    }

RESOURCE CBA r_aknfep_softkeys_phrase_creation_select_cancel_select
    {
    buttons = 
        { 
        // This prevents EAknSoftkeySelect operating on a long keypress 
        AVKON_CBA_BUTTON{id=EAknSoftkeySelect; longpressid=0; txt= text_softkey_select; }, 
        CBA_BUTTON{id=EAknSoftkeyCancel; txt= text_softkey_cancel; }, 
        AVKON_CBA_BUTTON{id=EAknSoftkeySelect; longpressid=0; txt= qtn_msk_select; } 
        };
    }
    
RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_numeric_mode_chars_plain
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = aknfep_number_mode_keymap_plain;
            }
        };
    }

RESOURCE SPECIAL_CHAR_TABLE r_aknfep_sct_numeric_mode_chars_sat_hidden
    {
    contents =
        {
        SCT_CHAR_SET
            {
            id = EAknSCTChiLatinInputModes;
            chars = aknfep_number_mode_keymap_sat_hidden;
            }
        };
    }
     
// End of file
